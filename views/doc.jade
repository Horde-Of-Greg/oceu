doctype html
html
  head
    title OCEu API Docs
    meta(charset="utf-8")
    style.
      body { font-family: Arial, sans-serif; margin: 2em; }
      h2, h3, h4 { margin-top: 1.5em; }
      pre { background: #f8f8f8; padding: 1em; border-radius: 5px; }
      code { background: #f0f0f0; padding: 2px 4px; border-radius: 3px; }
      ul { margin-bottom: 1em; }
  body
    h1 GT Recipe System Documentation

    h2 Data Structures

    h3 Recipe
    p Defines a GT recipe, with EU and Recipe time, all times are in ticks.

    h4 Regular Recipes
    pre
      code.
        {
            "base_eu": Number,
            "base_duration": Number,
            "base_chance": Number,
            "base_chance_bonus": Number,
            "base_parallel": Number,
            "amperage": Number,
            "flags": [Object Array],
        }

    h4 EBF Recipes (pass <code>--ebf</code> flag)
    pre
      code.
        {
            "base_eu": Number,
            "base_duration": Number,
            "base_recipe_heat": Number,
            "base_coil_heat": Number,
            "base_parallel": Number,
            "amerage": Number,
            "flags": [Object Array],
        }

    h3 Output
    p Stores the results of overclocking, unused fields are left null. <code>tier</code> is a tier indicating the energy tier the recipe is ran at, starting at 1 for LV.
    pre
      code.
        {
            "parallel": Number,
            "chance": Number,
            "chance_bonus": Number,
            "eu": Number,
            "time": Number,
            "tier": Number
        }

    h2 Flags
    ul
      li <code>--ebf</code>: Indicates an EBF recipe.
      li <code>--parallel</code>: Indicates parallel mechanics are used, also set <code>recipe.base_parallel</code> to configure the parallel count.
      li <code>--ce</code>: Emulates GTCE behaviour, with 2.8x overclocking and chance doubling per overclock.
      li <code>--macerator</code>: Emulates GTCE Macerator behaviour for chanced outputs
      li <code>--subtick</code>: Enables subtick overclocking, with parallel count doubled once the recipe time reached 1t.
      li <code>--time:[multiplier]</code>: Adds a multiplier to the recipe time.
      li <code>--eu:[multiplier]</code>: Adds a multiplier to the recipe eu/t cost.
      li <code>--extra</code>: Outputs extra tiers from UHV to MAX.
      li <code>--filter:[voltage]</code>: Only shows result from a specified voltage.
      li <code>--tick</code>: (Only used to generate tables) Displays time in ticks only.
      li <code>--rates</code>: Shows the rate of production (recipe/s) in the generated table.
      li <code>--output:[number]</code>: Multiplies the rates of production by <code>number</code>.
      li <code>--input:[number]</code>: Multiplies the input rates (same as the rate of production by default) by <code>number</code>.

    h2 API

    h3 POST /api/parse_input
    p Parses the input string into the <code>recipe</code> type, similiar to the command line argument style for <code>%t oceu</code>
    ul
      li Parameters:
        ul
          li <code>args: String</code>: the actual command line arguments
      li Returns:
        ul
          li <code>Recipe</code>: the parsed recipe

    h3 POST /api/calculate_overclock
    p Computes the eu cost and time required for each voltage tier, given a GT recipe.
    ul
      li Parameters:
        ul
          li <code>Recipe</code>: the required recipe.
      li Returns:
        ul
          li <code>Array [Output]</code>: the computed result sorted by voltage tier.

    h3 POST /api/generate_table
    p Generates a string table given a array of computed overclock results.
    ul
      li Parameters:
        ul
          li <code>flags: Array [String]</code>: the input flags required, see <a href="#Flags">flags</a>.
          li <code>outputs: Array [Outputs]</code>: the computed results.
      li Returns:
        ul
          li <code>String</code>: the formatted table.
